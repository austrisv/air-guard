from . import core as core
from typing import Any

class Stream:
    s: Any = ...
    e: Any = ...
    out_buf: bytes = ...
    def __init__(self, s: Any, e: Any = ...) -> None: ...
    def get_extra_info(self, v: Any): ...
    async def __aenter__(self): ...
    async def __aexit__(self, exc_type: Any, exc: Any, tb: Any) -> None: ...
    def close(self) -> None: ...
    async def wait_closed(self) -> None: ...
    async def read(self, n: Any): ...
    async def readinto(self, buf: Any): ...
    async def readexactly(self, n: Any): ...
    async def readline(self): ...
    def write(self, buf: Any) -> None: ...
    async def drain(self) -> None: ...
StreamReader = Stream
StreamWriter = Stream

async def open_connection(host: Any, port: Any): ...

class Server:
    async def __aenter__(self): ...
    async def __aexit__(self, exc_type: Any, exc: Any, tb: Any) -> None: ...
    def close(self) -> None: ...
    async def wait_closed(self) -> None: ...

async def start_server(cb: Any, host: Any, port: Any, backlog: int = ...): ...
async def stream_awrite(self, buf: Any, off: int = ..., sz: int = ...) -> None: ...
